import { Stakeholder } from "../../types/stakeholder-types";

const rowToStakeholder = (row: any, categories?: any): Stakeholder => {
  const stakeholder: Stakeholder = {
    address1: row.address_1 || "",
    address2: row.address_2 || "",
    adminContactEmail: row.admin_contact_email || "",
    adminContactName: row.admin_contact_name || "",
    adminContactPhone: row.admin_contact_phone || "",
    adminNotes: row.admin_notes || "",
    allowWalkins: row.allow_walkins,
    approvedDate: row.approved_date,
    assignedDate: row.assigned_date,
    assignedLoginId: row.assigned_login_id,
    assignedUser: row.assigned_user || "",
    categories: categories || row.categories,
    categoryNotes: row.category_notes || "",
    city: row.city || "",
    claimedDate: row.claimed_date,
    claimedLoginId: row.claimed_login_id,
    claimedUser: row.claimed_user || "",
    completeCriticalPercent: row.complete_critical_percent,
    confirmedAddress: row.v_address,
    confirmedCategories: row.v_categories,
    confirmedEmail: row.v_email,
    confirmedFoodTypes: row.v_food_types,
    confirmedHours: row.v_hours,
    confirmedName: row.v_name,
    confirmedPhone: row.v_phone,
    covidNotes: row.covid_notes || "",
    createdDate: row.created_date,
    createdLoginId: row.created_login_id,
    createdUser: row.created_user || "",
    description: row.description,
    // Don't have a distance, since we didn't specify origin
    // distance: row.distance || null,
    donationAcceptFrozen: row.donation_accept_frozen || false,
    donationAcceptPerishable: row.donation_accept_perishable || false,
    donationAcceptRefrigerated: row.donation_accept_refrigerated || false,
    donationContactEmail: row.donation_contact_email || "",
    donationContactName: row.donation_contact_name || "",
    donationContactPhone: row.donation_contact_phone || "",
    donationDeliveryInstructions: row.donation_delivery_instructions || "",
    donationNotes: row.donation_notes || "",
    donationPickup: row.donation_pickup || false,
    donationSchedule: row.donation_schedule || "",
    eligibilityNotes: row.eligibility_notes || "",
    email: row.email || "",
    facebook: row.facebook || "",
    foodBakery: row.food_bakery,
    foodDairy: row.food_dairy,
    foodDryGoods: row.food_dry_goods,
    foodMeat: row.food_meat,
    foodPrepared: row.food_prepared,
    foodProduce: row.food_produce,
    foodTypes: row.food_types || "",
    hours: row.hours,
    hoursNotes: row.hours_notes,
    id: row.id,
    inactive: row.inactive,
    inactiveTemporary: row.inactive_temporary,
    instagram: row.instagram || "",
    items: row.items || "",
    languages: row.languages || "",
    latitude: row.latitude ? Number(row.latitude) : null,
    linkedin: row.linkedin || "",
    longitude: row.longitude ? Number(row.longitude) : null,
    modifiedDate: row.modified_date,
    modifiedLoginId: row.modified_login_id,
    modifiedUser: row.modified_user || "",
    name: row.name || "",
    neighborhoodId: row.neighborhood_id,
    notes: row.notes || "",
    parentOrganization: row.parent_organization || "",
    parentOrganizationId: row.parent_organization_id,
    phone: row.phone || "",
    physicalAccess: row.physical_access || "",
    pinterest: row.pinterest || "",
    requirements: row.requirements || "",
    reviewedLoginId: row.approved_login_id,
    reviewedUser: row.reviewed_user || "",
    reviewNotes: row.review_notes,
    services: row.services || "",
    state: row.state || "",
    submittedDate: row.submitted_date,
    submittedLoginId: row.submitted_login_id,
    submittedUser: row.submitted_user || "",
    suggestionCount: row.sug_count || "0",
    tags: row.tags,
    twitter: row.twitter || "",
    verificationStatusId: row.verification_status_id,
    website: row.website || "",
    zip: row.zip || "",
  };
  return stakeholder;
};

export default {
  rowToStakeholder,
};
